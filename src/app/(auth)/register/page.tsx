// src/app/(auth)/register/page.tsx
"use client";

import React, { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import Link from "next/link";
import { useAuth } from "@/hooks/useAuth";
import { useActiveDirections } from "@/services/instituteService";
import { UserRole } from "@/types";
import Layout from "@/components/common/Layout";
import { toast } from "react-toastify";
import {
  CheckCircle,
  Clock,
  AlertCircle,
  TestTube,
  GraduationCap,
  Users,
  Eye,
  EyeOff,
  UserPlus,
  Building,
} from "lucide-react";

export default function RegisterPage() {
  const [name, setName] = useState("");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [role, setRole] = useState<UserRole>(UserRole.APPLICANT);
  const [directionId, setDirectionId] = useState("");
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [errorMessage, setErrorMessage] = useState("");
  const [isFirstUser, setIsFirstUser] = useState(false);
  const [registrationSuccess, setRegistrationSuccess] = useState(false);
  const [registeredRole, setRegisteredRole] = useState<UserRole | null>(null);

  const { register, error, clearError, loading } = useAuth();
  const { data: directions = [], isLoading: directionsLoading } =
    useActiveDirections();
  const router = useRouter();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≤ —Å–∏—Å—Ç–µ–º–µ
  useEffect(() => {
    const checkFirstUser = async () => {
      try {
        const response = await fetch("/api/check-admins");
        const data = await response.json();
        setIsFirstUser(data.isFirstUser);

        // –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Å—Ä–∞–∑—É —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å ADMIN
        if (data.isFirstUser) {
          setRole(UserRole.ADMIN);
        }
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:", error);
      }
    };

    checkFirstUser();
  }, []);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setErrorMessage("");
    clearError();

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (password !== confirmPassword) {
      setErrorMessage("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç");
      return;
    }

    if (password.length < 8) {
      setErrorMessage("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤");
      return;
    }

    if (role === UserRole.APPLICANT && !directionId) {
      setErrorMessage("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏");
      return;
    }

    try {
      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–æ–ª—å—é
      await register(
        name,
        email,
        password,
        role,
        role === UserRole.APPLICANT ? directionId : undefined
      );

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      setRegistrationSuccess(true);
      setRegisteredRole(role);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      if (isFirstUser || role === UserRole.ADMIN) {
        toast.success("üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.", {
          autoClose: 5000,
        });

        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
          router.push("/login?registered=true&activated=true");
        }, 3000);
      } else {
        toast.info("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.", {
          autoClose: 7000,
        });

        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
          router.push("/login?registered=true&activation=pending");
        }, 5000);
      }
    } catch (error) {
      const message =
        error instanceof Error ? error.message : "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏";
      setErrorMessage(message);
      toast.error(`–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${message}`);
    }
  };

  // –ï—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  if (registrationSuccess) {
    return (
      <Layout title="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞">
        <div className="min-h-screen flex items-center justify-center bg-slate-900">
          <div className="w-full max-w-md p-8 space-y-6 bg-slate-800 border-2 border-slate-600 text-center">
            {isFirstUser || registeredRole === UserRole.ADMIN ? (
              // –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∞–≤—Ç–æ–∞–∫—Ç–∏–≤–∞—Ü–∏—è)
              <>
                <div className="flex justify-center">
                  <div className="p-3 bg-green-800 border-2 border-green-600">
                    <CheckCircle className="h-8 w-8 text-green-400" />
                  </div>
                </div>
                <h1 className="text-2xl font-mono font-bold text-white uppercase tracking-wide">
                  –î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨!
                </h1>
                <div className="space-y-3">
                  <p className="text-slate-300 font-mono">
                    –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                    –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.
                  </p>
                  <div className="bg-green-900 border-2 border-green-600 p-4">
                    <p className="text-sm text-green-200 font-mono text-left">
                      <strong>–ò–ú–Ø:</strong> {name}
                      <br />
                      <strong>EMAIL:</strong> {email}
                      <br />
                      <strong>–†–û–õ–¨:</strong> –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†
                    </p>
                  </div>
                  <p className="text-xs text-slate-400 font-mono uppercase">
                    –ü–ï–†–ï–ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ê –°–¢–†–ê–ù–ò–¶–£ –í–•–û–î–ê...
                  </p>
                </div>
              </>
            ) : (
              // –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω—É–∂–Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—è)
              <>
                <div className="flex justify-center">
                  <div className="p-3 bg-yellow-800 border-2 border-yellow-600">
                    <Clock className="h-8 w-8 text-yellow-400" />
                  </div>
                </div>
                <h1 className="text-2xl font-mono font-bold text-white uppercase tracking-wide">
                  –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!
                </h1>
                <div className="space-y-3">
                  <p className="text-slate-300 font-mono">
                    –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                    {role === UserRole.CURATOR
                      ? " –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
                      : " –∫—É—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"}
                    .
                  </p>
                  <div className="bg-yellow-900 border-2 border-yellow-600 p-4">
                    <div className="flex items-center gap-2 mb-2">
                      <AlertCircle className="h-4 w-4 text-yellow-400" />
                      <span className="text-sm font-mono font-bold text-yellow-200 uppercase">
                        –ß–¢–û –î–ê–õ–¨–®–ï?
                      </span>
                    </div>
                    <ul className="text-sm text-yellow-300 font-mono space-y-1 text-left">
                      <li>
                        ‚Ä¢ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–† –ü–û–õ–£–ß–ò–¢ –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –û –í–ê–®–ï–ô –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò
                      </li>
                      <li>‚Ä¢ –ü–û–°–õ–ï –ê–ö–¢–ò–í–ê–¶–ò–ò –í–´ –ü–û–õ–£–ß–ò–¢–ï –î–û–°–¢–£–ü –ö –°–ò–°–¢–ï–ú–ï</li>
                      <li>‚Ä¢ –ü–û–ü–†–û–ë–£–ô–¢–ï –í–û–ô–¢–ò –ß–ï–†–ï–ó –ù–ï–°–ö–û–õ–¨–ö–û –ú–ò–ù–£–¢</li>
                      {role === UserRole.APPLICANT && (
                        <li>
                          ‚Ä¢ –ü–û–°–õ–ï –ê–ö–¢–ò–í–ê–¶–ò–ò –ó–ê–ü–û–õ–ù–ò–¢–ï –ê–ù–ö–ï–¢–£ –î–õ–Ø –î–û–°–¢–£–ü–ê –ö
                          –¢–ï–°–¢–ê–ú
                        </li>
                      )}
                    </ul>
                  </div>
                  <div className="bg-slate-700 border-2 border-slate-600 p-4">
                    <p className="text-sm text-slate-300 font-mono text-left">
                      <strong>–ò–ú–Ø:</strong> {name}
                      <br />
                      <strong>EMAIL:</strong> {email}
                      <br />
                      <strong>–†–û–õ–¨:</strong>{" "}
                      {registeredRole === UserRole.CURATOR
                        ? "–ö–£–†–ê–¢–û–†"
                        : "–ê–ë–ò–¢–£–†–ò–ï–ù–¢"}
                      {registeredRole === UserRole.APPLICANT && directionId && (
                        <>
                          <br />
                          <strong>–ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï:</strong>{" "}
                          {directions.find((d) => d.$id === directionId)
                            ?.name || "–í–´–ë–†–ê–ù–ù–û–ï –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï"}
                        </>
                      )}
                    </p>
                  </div>
                  <p className="text-xs text-slate-400 font-mono uppercase">
                    –ü–ï–†–ï–ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ê –°–¢–†–ê–ù–ò–¶–£ –í–•–û–î–ê...
                  </p>
                </div>
              </>
            )}

            <div className="pt-4">
              <Link
                href="/login"
                className="inline-flex items-center gap-2 px-4 py-2 bg-blue-800 border-2 border-blue-600 text-blue-200 font-mono font-bold uppercase"
              >
                –ü–ï–†–ï–ô–¢–ò –ö–û –í–•–û–î–£
              </Link>
            </div>
          </div>
        </div>
      </Layout>
    );
  }

  return (
    <Layout title="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è">
      <div className="min-h-screen flex items-center justify-center bg-slate-900">
        <div className="w-full max-w-md p-8 space-y-8 bg-slate-800 border-2 border-slate-600">
          <div className="text-center">
            <div className="flex justify-center mb-4">
              <div className="p-3 bg-blue-800 border-2 border-blue-600">
                <UserPlus className="h-8 w-8 text-blue-400" />
              </div>
            </div>
            <h1 className="text-3xl font-mono font-bold text-white uppercase tracking-wide">
              –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø
            </h1>
            <p className="mt-2 text-sm text-slate-300 font-mono">
              –°–û–ó–î–ê–ô–¢–ï –ê–ö–ö–ê–£–ù–¢ –î–õ–Ø –î–û–°–¢–£–ü–ê –ö –°–ò–°–¢–ï–ú–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
            </p>
          </div>

          {!isFirstUser && role !== UserRole.ADMIN && (
            <div className="bg-yellow-900 border-2 border-yellow-600 p-4">
              <div className="flex items-center gap-2">
                <AlertCircle className="h-4 w-4 text-yellow-400 flex-shrink-0" />
                <p className="text-sm text-yellow-200 font-mono">
                  <strong>–í–ê–ñ–ù–û:</strong> –ü–û–°–õ–ï –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –í–ê–® –ê–ö–ö–ê–£–ù–¢ –î–û–õ–ñ–ï–ù
                  –ë–´–¢–¨ –ê–ö–¢–ò–í–ò–†–û–í–ê–ù{" "}
                  {role === UserRole.CURATOR
                    ? "–ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–ú"
                    : "–ö–£–†–ê–¢–û–†–û–ú –ò–õ–ò –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–ú"}{" "}
                  –ü–ï–†–ï–î –ü–ï–†–í–´–ú –í–•–û–î–û–ú –í –°–ò–°–¢–ï–ú–£.
                </p>
              </div>
            </div>
          )}

          <form
            className="mt-8 space-y-6"
            onSubmit={handleSubmit}
            autoComplete="off"
          >
            {(error || errorMessage) && (
              <div className="p-4 text-red-200 bg-red-900 border-2 border-red-600">
                <div className="flex items-center gap-2">
                  <AlertCircle className="h-4 w-4 flex-shrink-0" />
                  <span className="text-sm font-mono">{errorMessage || error}</span>
                </div>
              </div>
            )}

            <div>
              <label
                htmlFor="name"
                className="block text-sm font-mono font-bold text-slate-300 mb-1 uppercase"
              >
                –ü–û–õ–ù–û–ï –ò–ú–Ø
              </label>
              <input
                id="name"
                type="text"
                value={name}
                onChange={(e) => setName(e.target.value)}
                required
                className="w-full px-3 py-3 border-2 border-slate-600 bg-slate-700 text-white font-mono focus:outline-none focus:border-blue-500"
                placeholder="–í–í–ï–î–ò–¢–ï –í–ê–®–ï –ü–û–õ–ù–û–ï –ò–ú–Ø"
              />
            </div>

            <div>
              <label
                htmlFor="email"
                className="block text-sm font-mono font-bold text-slate-300 mb-1 uppercase"
              >
                EMAIL –ê–î–†–ï–°
              </label>
              <input
                id="email"
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
                autoComplete="off"
                className="w-full px-3 py-3 border-2 border-slate-600 bg-slate-700 text-white font-mono focus:outline-none focus:border-blue-500"
                placeholder="–í–í–ï–î–ò–¢–ï –í–ê–® EMAIL"
              />
            </div>

            <div>
              <label
                htmlFor="password"
                className="block text-sm font-mono font-bold text-slate-300 mb-1 uppercase"
              >
                –ü–ê–†–û–õ–¨
              </label>
              <div className="relative">
                <input
                  id="password"
                  type={showPassword ? "text" : "password"}
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  required
                  autoComplete="off"
                  className="w-full px-3 py-3 pr-10 border-2 border-slate-600 bg-slate-700 text-white font-mono focus:outline-none focus:border-blue-500"
                  placeholder="–ú–ò–ù–ò–ú–£–ú 8 –°–ò–ú–í–û–õ–û–í"
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="absolute inset-y-0 right-0 pr-3 flex items-center text-slate-400"
                >
                  {showPassword ? (
                    <EyeOff className="h-5 w-5" />
                  ) : (
                    <Eye className="h-5 w-5" />
                  )}
                </button>
              </div>
            </div>

            <div>
              <label
                htmlFor="confirmPassword"
                className="block text-sm font-mono font-bold text-slate-300 mb-1 uppercase"
              >
                –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ü–ê–†–û–õ–Ø
              </label>
              <div className="relative">
                <input
                  id="confirmPassword"
                  type={showConfirmPassword ? "text" : "password"}
                  value={confirmPassword}
                  onChange={(e) => setConfirmPassword(e.target.value)}
                  required
                  className="w-full px-3 py-3 pr-10 border-2 border-slate-600 bg-slate-700 text-white font-mono focus:outline-none focus:border-blue-500"
                  placeholder="–ü–û–í–¢–û–†–ò–¢–ï –ü–ê–†–û–õ–¨"
                />
                <button
                  type="button"
                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                  className="absolute inset-y-0 right-0 pr-3 flex items-center text-slate-400"
                >
                  {showConfirmPassword ? (
                    <EyeOff className="h-5 w-5" />
                  ) : (
                    <Eye className="h-5 w-5" />
                  )}
                </button>
              </div>
            </div>

            {!isFirstUser ? (
              <div>
                <label
                  htmlFor="role"
                  className="block text-sm font-mono font-bold text-slate-300 mb-1 uppercase"
                >
                  –†–û–õ–¨ –í –°–ò–°–¢–ï–ú–ï
                </label>
                <select
                  id="role"
                  value={role}
                  onChange={(e) => setRole(e.target.value as UserRole)}
                  className="w-full px-3 py-3 border-2 border-slate-600 bg-slate-700 text-white font-mono focus:outline-none focus:border-blue-500"
                >
                  <option value={UserRole.APPLICANT}>–ê–ë–ò–¢–£–†–ò–ï–ù–¢</option>
                  <option value={UserRole.CURATOR}>–ö–£–†–ê–¢–û–†</option>
                </select>
                <p className="mt-1 text-xs text-slate-400 font-mono">
                  {role === UserRole.APPLICANT
                    ? "–í–´ –°–ú–û–ñ–ï–¢–ï –ü–†–û–•–û–î–ò–¢–¨ –¢–ï–°–¢–´ –ü–û–°–õ–ï –ê–ö–¢–ò–í–ê–¶–ò–ò –ê–ö–ö–ê–£–ù–¢–ê"
                    : "–í–´ –°–ú–û–ñ–ï–¢–ï –°–û–ó–î–ê–í–ê–¢–¨ –¢–ï–°–¢–´ –ü–û–°–õ–ï –ê–ö–¢–ò–í–ê–¶–ò–ò –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–ú"}
                </p>
              </div>
            ) : (
              <div className="bg-blue-900 border-2 border-blue-600 p-4">
                <div className="flex items-center gap-2">
                  <CheckCircle className="h-4 w-4 text-blue-400" />
                  <p className="text-sm text-blue-200 font-mono">
                    –í–´ –ë–£–î–ï–¢–ï –ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–ù–´ –ö–ê–ö{" "}
                    <strong>–ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†</strong> –ò –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–´
                    (–ü–ï–†–í–´–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –°–ò–°–¢–ï–ú–´).
                  </p>
                </div>
              </div>
            )}

            {role === UserRole.APPLICANT && (
              <div>
                <label
                  htmlFor="direction"
                  className="block text-sm font-mono font-bold text-slate-300 mb-1 uppercase"
                >
                  –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–î–ì–û–¢–û–í–ö–ò
                </label>
                {directionsLoading ? (
                  <div className="w-full px-3 py-3 border-2 border-slate-600 bg-slate-700 flex items-center gap-2">
                    <div className="w-4 h-4 border-2 border-blue-400 border-t-transparent"></div>
                    <span className="text-slate-400 font-mono">
                      –ó–ê–ì–†–£–ó–ö–ê –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ô...
                    </span>
                  </div>
                ) : directions.length > 0 ? (
                  <select
                    id="direction"
                    value={directionId}
                    onChange={(e) => setDirectionId(e.target.value)}
                    required
                    className="w-full px-3 py-3 border-2 border-slate-600 bg-slate-700 text-white font-mono focus:outline-none focus:border-blue-500"
                  >
                    <option value="">–í–´–ë–ï–†–ò–¢–ï –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï</option>
                    {directions.map((direction) => (
                      <option key={direction.$id} value={direction.$id}>
                        {direction.name} ({direction.institute?.name})
                      </option>
                    ))}
                  </select>
                ) : (
                  <div className="w-full px-3 py-3 border-2 border-slate-600 bg-slate-700">
                    <div className="flex items-center gap-2 text-slate-400">
                      <Building className="h-4 w-4" />
                      <span className="font-mono">–ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–ö–ê –ù–ï –°–û–ó–î–ê–ù–´</span>
                    </div>
                  </div>
                )}
                <p className="mt-1 text-xs text-slate-400 font-mono">
                  –í–´–ë–ï–†–ò–¢–ï –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï, –ü–û –ö–û–¢–û–†–û–ú–£ –ü–õ–ê–ù–ò–†–£–ï–¢–ï –ü–û–°–¢–£–ü–ê–¢–¨
                </p>
              </div>
            )}

            <div>
              <button
                type="submit"
                disabled={
                  loading ||
                  (role === UserRole.APPLICANT && directions.length === 0)
                }
                className="w-full flex justify-center items-center gap-2 py-3 px-4 border-2 border-blue-600 text-sm font-mono font-bold text-blue-200 bg-blue-800 disabled:bg-slate-700 disabled:border-slate-600 disabled:text-slate-500 disabled:cursor-not-allowed uppercase"
              >
                {loading ? (
                  <>
                    <div className="w-4 h-4 border-2 border-blue-200 border-t-transparent"></div>
                    –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø...
                  </>
                ) : (
                  <>
                    <UserPlus className="h-4 w-4" />
                    –ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–¢–¨–°–Ø
                  </>
                )}
              </button>

              {role === UserRole.APPLICANT && directions.length === 0 && (
                <p className="mt-2 text-xs text-red-400 text-center font-mono">
                  –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ù–ï–î–û–°–¢–£–ü–ù–ê: –ù–ï –°–û–ó–î–ê–ù–´ –ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–î–ì–û–¢–û–í–ö–ò
                </p>
              )}
            </div>

            <div className="text-center text-sm">
              <p className="text-slate-300 font-mono">
                –£–ñ–ï –ï–°–¢–¨ –ê–ö–ö–ê–£–ù–¢?{" "}
                <Link
                  href="/login"
                  className="font-mono font-bold text-blue-400 border-b border-blue-400"
                >
                  –í–û–ô–¢–ò
                </Link>
              </p>
            </div>
          </form>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –±–ª–æ–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π */}
          <div className="mt-6 space-y-3">
            {role === UserRole.APPLICANT && (
              <div className="bg-green-900 border-2 border-green-600 p-3">
                <div className="flex items-start gap-2">
                  <GraduationCap className="h-4 w-4 text-green-400 mt-0.5" />
                  <div className="text-xs text-green-200 font-mono">
                    <strong>–î–õ–Ø –ê–ë–ò–¢–£–†–ò–ï–ù–¢–û–í:</strong> –ü–û–°–õ–ï –ê–ö–¢–ò–í–ê–¶–ò–ò –ó–ê–ü–û–õ–ù–ò–¢–ï
                    –ê–ù–ö–ï–¢–£ –° –ü–ê–°–ü–û–†–¢–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –î–û–°–¢–£–ü–ê –ö –¢–ï–°–¢–ê–ú.
                  </div>
                </div>
              </div>
            )}

            {role === UserRole.CURATOR && (
              <div className="bg-blue-900 border-2 border-blue-600 p-3">
                <div className="flex items-start gap-2">
                  <Users className="h-4 w-4 text-blue-400 mt-0.5" />
                  <div className="text-xs text-blue-200 font-mono">
                    <strong>–î–õ–Ø –ö–£–†–ê–¢–û–†–û–í:</strong> –ü–û–°–õ–ï –ê–ö–¢–ò–í–ê–¶–ò–ò –í–´ –°–ú–û–ñ–ï–¢–ï
                    –°–û–ó–î–ê–í–ê–¢–¨ –ò –†–ï–î–ê–ö–¢–ò–†–û–í–ê–¢–¨ –¢–ï–°–¢–´, –£–ü–†–ê–í–õ–Ø–¢–¨ –ê–ë–ò–¢–£–†–ò–ï–ù–¢–ê–ú–ò.
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </Layout>
  );
}