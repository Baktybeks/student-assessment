// src/app/(dashboard)/applicant/tests/[id]/page.tsx
"use client";

import React, { useState, useEffect, useCallback } from "react";
import { useRouter, useParams } from "next/navigation";
import { useAuth } from "@/hooks/useAuth";
import { useProfileByUserId } from "@/services/profileService";
import { useTest, useQuestionsByTest } from "@/services/testService";
import {
  useActiveSession,
  useCreateTestSession,
  useSubmitAnswer,
  useFinishTestSession,
} from "@/services/testSessionService";
import { UserRole } from "@/types";
import { toast } from "react-toastify";
import {
  Clock,
  CheckCircle,
  AlertTriangle,
  ArrowLeft,
  ArrowRight,
  Save,
  Send,
  Eye,
  EyeOff,
  Target,
  BookOpen,
  Hash,
  Award,
  Timer,
  List,
  Flag,
  Pause,
  Play,
  RotateCcw,
  User,
  FileText,
  Calendar,
  Zap,
  Activity,
  BarChart3,
  ChevronLeft,
  ChevronRight,
  AlertCircle,
  Loader,
} from "lucide-react";

interface TimeRemaining {
  hours: number;
  minutes: number;
  seconds: number;
  total: number;
}

export default function TestTakingPage() {
  const router = useRouter();
  const params = useParams();
  const testId = params.id as string;

  const { user } = useAuth();
  const { data: profile } = useProfileByUserId(user?.$id || "");
  const { data: test, isLoading: testLoading } = useTest(testId);
  const { data: questions = [], isLoading: questionsLoading } = useQuestionsByTest(testId);
  const { data: activeSession } = useActiveSession(testId, user?.$id || "");

  const createSessionMutation = useCreateTestSession();
  const submitAnswerMutation = useSubmitAnswer();
  const finishSessionMutation = useFinishTestSession();

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–∞
  const [sessionId, setSessionId] = useState<string | null>(null);
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [answers, setAnswers] = useState<Record<string, string>>({});
  const [timeRemaining, setTimeRemaining] = useState<TimeRemaining | null>(null);
  const [isTimeUp, setIsTimeUp] = useState(false);
  const [showConfirmFinish, setShowConfirmFinish] = useState(false);
  const [testStartTime, setTestStartTime] = useState<Date | null>(null);
  const [isSubmittingAnswer, setIsSubmittingAnswer] = useState(false);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–∞
  useEffect(() => {
    if (activeSession) {
      setSessionId(activeSession.$id);
      setTestStartTime(new Date(activeSession.startedAt));
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ—Ç–≤–µ—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å
      if (activeSession.answers && Array.isArray(activeSession.answers)) {
  const answersMap: Record<string, string> = {};
  activeSession.answers.forEach((answer: { questionId: string; selectedOption: string }) => {
    answersMap[answer.questionId] = answer.selectedOption;
  });
  setAnswers(answersMap);
}
    }
  }, [activeSession]);

  // –¢–∞–π–º–µ—Ä
  useEffect(() => {
    if (!testStartTime || !test?.timeLimit) return;

    const interval = setInterval(() => {
      const now = new Date();
      const elapsed = Math.floor((now.getTime() - testStartTime.getTime()) / 1000);
      const totalTimeInSeconds = test.timeLimit && test.timeLimit * 60;
      const remaining = totalTimeInSeconds &&  Math.max(0, totalTimeInSeconds - elapsed);

      if (remaining === 0) {
        setIsTimeUp(true);
        handleAutoFinish();
        clearInterval(interval);
        return;
      }

      if(remaining  ) {
        setTimeRemaining({
          hours: Math.floor(remaining / 3600),
          minutes: Math.floor((remaining % 3600) / 60),
          seconds: remaining % 60,
          total: remaining,
        });
      }

    }, 1000);

    return () => clearInterval(interval);
  }, [testStartTime, test?.timeLimit]);

  // –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞
  const handleStartTest = async () => {
    if (!user || !profile?.isProfileComplete) {
      toast.error("‚ùå –ó–ê–ü–û–õ–ù–ò–¢–ï –ü–†–û–§–ò–õ–¨ –î–õ–Ø –ü–†–û–•–û–ñ–î–ï–ù–ò–Ø –¢–ï–°–¢–ê");
      router.push("/applicant/profile");
      return;
    }

    try {
      const session = await createSessionMutation.mutateAsync({
        testId,
        applicantId: user.$id,
      });
      
      setSessionId(session.$id);
      setTestStartTime(new Date());
      toast.success("‚úÖ –¢–ï–°–¢ –ù–ê–ß–ê–¢! –£–î–ê–ß–ò!");
    } catch (error) {
      toast.error(`‚ùå –û–®–ò–ë–ö–ê –ù–ê–ß–ê–õ–ê –¢–ï–°–¢–ê: ${(error as Error).message}`);
    }
  };

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
  const handleAnswerSelect = async (questionId: string, selectedOption: string) => {
    if (!sessionId) return;

    setIsSubmittingAnswer(true);
    
    try {
      await submitAnswerMutation.mutateAsync({
        sessionId,
        questionId,
        selectedOption,
      });

      setAnswers(prev => ({
        ...prev,
        [questionId]: selectedOption,
      }));

      toast.success("üíæ –û–¢–í–ï–¢ –°–û–•–†–ê–ù–ï–ù", { autoClose: 1000 });
    } catch (error) {
      toast.error(`‚ùå –û–®–ò–ë–ö–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø: ${(error as Error).message}`);
    } finally {
      setIsSubmittingAnswer(false);
    }
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
  const handleAutoFinish = useCallback(async () => {
    if (!sessionId || !testStartTime) return;

    const timeSpent = Math.floor((new Date().getTime() - testStartTime.getTime()) / 1000);

    try {
      const result = await finishSessionMutation.mutateAsync({
        sessionId,
        data: {
          finishReason: "TIME_UP",
          timeSpent,
        },
      });

      toast.warn("‚è∞ –í–†–ï–ú–Ø –í–´–®–õ–û! –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò");
      router.push(`/applicant/results/${result.$id}`);
    } catch (error) {
      toast.error(`‚ùå –û–®–ò–ë–ö–ê –ó–ê–í–ï–†–®–ï–ù–ò–Ø: ${(error as Error).message}`);
    }
  }, [sessionId, testStartTime, finishSessionMutation, router]);

  // –†—É—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
  const handleFinishTest = async () => {
    if (!sessionId || !testStartTime) return;

    const timeSpent = Math.floor((new Date().getTime() - testStartTime.getTime()) / 1000);

    try {
      const result = await finishSessionMutation.mutateAsync({
        sessionId,
        data: {
          finishReason: "MANUAL",
          timeSpent,
        },
      });

      toast.success("‚úÖ –¢–ï–°–¢ –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!");
      router.push(`/applicant/results/${result.$id}`);
    } catch (error) {
      toast.error(`‚ùå –û–®–ò–ë–ö–ê –ó–ê–í–ï–†–®–ï–ù–ò–Ø: ${(error as Error).message}`);
    }
  };

  // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º
  const goToQuestion = (index: number) => {
    if (index >= 0 && index < questions.length) {
      setCurrentQuestionIndex(index);
    }
  };

  const currentQuestion = questions[currentQuestionIndex];
  const isAnswered = currentQuestion && answers[currentQuestion.$id];
  const answeredCount = Object.keys(answers).length;
  const progress = questions.length > 0 ? (answeredCount / questions.length) * 100 : 0;

  // –ó–∞—â–∏—Ç–∞ –¥–æ—Å—Ç—É–ø–∞
  if (!user || user.role !== UserRole.APPLICANT) {
    return (
      <div className="min-h-screen bg-slate-900 text-white">
        <div className="p-6 max-w-7xl mx-auto">
          <div className="text-center">
            <AlertTriangle className="h-16 w-16 text-red-400 mx-auto mb-4" />
            <h2 className="text-2xl font-mono font-bold text-white mb-2 uppercase">
              –û–®–ò–ë–ö–ê –î–û–°–¢–£–ü–ê
            </h2>
            <p className="text-slate-300 font-mono">–î–û–°–¢–£–ü –¢–û–õ–¨–ö–û –î–õ–Ø –ê–ë–ò–¢–£–†–ò–ï–ù–¢–û–í</p>
          </div>
        </div>
      </div>
    );
  }

  if (testLoading || questionsLoading) {
    return (
      <div className="min-h-screen bg-slate-900 text-white">
        <div className="p-6 max-w-7xl mx-auto">
          <div className="flex justify-center items-center h-64">
            <Loader className="w-8 h-8 animate-spin text-blue-400 mr-3" />
            <span className="text-slate-300 font-mono">–ó–ê–ì–†–£–ó–ö–ê –¢–ï–°–¢–ê...</span>
          </div>
        </div>
      </div>
    );
  }

  if (!test) {
    return (
      <div className="min-h-screen bg-slate-900 text-white">
        <div className="p-6 max-w-7xl mx-auto">
          <div className="text-center">
            <AlertTriangle className="h-16 w-16 text-red-400 mx-auto mb-4" />
            <h2 className="text-2xl font-mono font-bold text-white mb-2 uppercase">
              –¢–ï–°–¢ –ù–ï –ù–ê–ô–î–ï–ù
            </h2>
            <p className="text-slate-300 font-mono mb-4">
              –ó–ê–ü–†–ê–®–ò–í–ê–ï–ú–´–ô –¢–ï–°–¢ –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢ –ò–õ–ò –ë–´–õ –£–î–ê–õ–ï–ù
            </p>
            <button
              onClick={() => router.push("/applicant/tests")}
              className="flex items-center gap-2 mx-auto px-4 py-2 bg-blue-800 text-blue-200 border-2 border-blue-600 font-mono font-bold uppercase"
            >
              <ArrowLeft className="h-4 w-4" />
              –í–ï–†–ù–£–¢–¨–°–Ø –ö –¢–ï–°–¢–ê–ú
            </button>
          </div>
        </div>
      </div>
    );
  }

  // –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞
  if (!sessionId) {
    return (
      <div className="min-h-screen bg-slate-900 text-white">
        <div className="p-6 max-w-4xl mx-auto">
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
          <div className="mb-8 border-b-2 border-slate-700 pb-6">
            <div className="flex items-center gap-3 mb-2">
              <FileText className="h-8 w-8 text-blue-400" />
              <h1 className="text-3xl font-mono font-bold text-white uppercase tracking-wide">
                {test.title}
              </h1>
            </div>
            <p className="text-slate-300 font-mono uppercase">
              –ü–û–î–ì–û–¢–û–í–ö–ê –ö –ü–†–û–•–û–ñ–î–ï–ù–ò–Æ –¢–ï–°–¢–ê
            </p>
          </div>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Å—Ç–µ */}
          <div className="space-y-6 mb-8">
            {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
            {test.description && (
              <div className="bg-slate-800 border-2 border-slate-600 p-6">
                <h3 className="text-lg font-mono font-bold text-white mb-3 uppercase">
                  –û–ü–ò–°–ê–ù–ò–ï –¢–ï–°–¢–ê
                </h3>
                <p className="text-slate-300 font-mono leading-relaxed">
                  {test.description}
                </p>
              </div>
            )}

            {/* –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ */}
            <div className="bg-slate-800 border-2 border-slate-600 p-6">
              <h3 className="text-lg font-mono font-bold text-white mb-4 uppercase">
                –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò –¢–ï–°–¢–ê
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                <div className="flex items-center gap-3">
                  <Hash className="h-6 w-6 text-blue-400" />
                  <div>
                    <div className="text-sm font-mono font-bold text-slate-300 uppercase">
                      –í–û–ü–†–û–°–û–í
                    </div>
                    <div className="text-xl font-mono font-bold text-white">
                      {questions.length}
                    </div>
                  </div>
                </div>

                <div className="flex items-center gap-3">
                  <Clock className="h-6 w-6 text-yellow-400" />
                  <div>
                    <div className="text-sm font-mono font-bold text-slate-300 uppercase">
                      –í–†–ï–ú–Ø
                    </div>
                    <div className="text-xl font-mono font-bold text-white">
                      {test.timeLimit ? `${test.timeLimit}–ú` : "‚àû"}
                    </div>
                  </div>
                </div>

                <div className="flex items-center gap-3">
                  <Target className="h-6 w-6 text-green-400" />
                  <div>
                    <div className="text-sm font-mono font-bold text-slate-300 uppercase">
                      –ú–ê–ö–°. –ë–ê–õ–õ
                    </div>
                    <div className="text-xl font-mono font-bold text-white">
                      {test.maxScore}
                    </div>
                  </div>
                </div>

                <div className="flex items-center gap-3">
                  <Award className="h-6 w-6 text-purple-400" />
                  <div>
                    <div className="text-sm font-mono font-bold text-slate-300 uppercase">
                      –ü–†–û–•–û–î–ù–û–ô
                    </div>
                    <div className="text-xl font-mono font-bold text-white">
                      {test.passingScore}%
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* –ü—Ä–∞–≤–∏–ª–∞ */}
            <div className="bg-orange-900 border-2 border-orange-600 p-6">
              <h3 className="text-lg font-mono font-bold text-orange-200 mb-4 uppercase">
                ‚ö†Ô∏è –í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê
              </h3>
              <ul className="space-y-2 text-orange-300 font-mono">
                <li>‚Ä¢ –£ –í–ê–° –ï–°–¢–¨ –¢–û–õ–¨–ö–û –û–î–ù–ê –ü–û–ü–´–¢–ö–ê –ü–†–û–•–û–ñ–î–ï–ù–ò–Ø –≠–¢–û–ì–û –¢–ï–°–¢–ê</li>
                <li>‚Ä¢ –û–¢–í–ï–¢–´ –°–û–•–†–ê–ù–Ø–Æ–¢–°–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –ü–†–ò –í–´–ë–û–†–ï –í–ê–†–ò–ê–ù–¢–ê</li>
                {test.timeLimit && (
                  <li>‚Ä¢ –ü–†–ò –ò–°–¢–ï–ß–ï–ù–ò–ò –í–†–ï–ú–ï–ù–ò –¢–ï–°–¢ –ó–ê–í–ï–†–®–ò–¢–°–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò</li>
                )}
                <li>‚Ä¢ –ú–û–ñ–ù–û –ü–ï–†–ï–ú–ï–©–ê–¢–¨–°–Ø –ú–ï–ñ–î–£ –í–û–ü–†–û–°–ê–ú–ò –ò –ò–ó–ú–ï–ù–Ø–¢–¨ –û–¢–í–ï–¢–´</li>
                <li>‚Ä¢ –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø –ü–†–û–•–û–î–ò–¢–¨ –¢–ï–°–¢ –ë–ï–ó –ü–ï–†–ï–†–´–í–û–í</li>
                <li>‚Ä¢ –£–ë–ï–î–ò–¢–ï–°–¨ –í –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–ò –ò–ù–¢–ï–†–ù–ï–¢-–°–û–ï–î–ò–ù–ï–ù–ò–Ø</li>
              </ul>
            </div>

            {/* –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ */}
            <div className="bg-slate-800 border-2 border-slate-600 p-6">
              <h3 className="text-lg font-mono font-bold text-white mb-4 uppercase">
                –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò
              </h3>
              <div className="space-y-3">
                <div className="flex items-center gap-3">
                  {profile?.isProfileComplete ? (
                    <CheckCircle className="h-5 w-5 text-green-400" />
                  ) : (
                    <AlertTriangle className="h-5 w-5 text-red-400" />
                  )}
                  <span className="font-mono text-white">
                    –ü–†–û–§–ò–õ–¨ –ó–ê–ü–û–õ–ù–ï–ù: {profile?.isProfileComplete ? "–î–ê" : "–ù–ï–¢"}
                  </span>
                </div>
                
                <div className="flex items-center gap-3">
                  <CheckCircle className="h-5 w-5 text-green-400" />
                  <span className="font-mono text-white">
                    –¢–ï–°–¢ –î–û–°–¢–£–ü–ï–ù: –î–ê
                  </span>
                </div>

                <div className="flex items-center gap-3">
                  <CheckCircle className="h-5 w-5 text-green-400" />
                  <span className="font-mono text-white">
                    –í–û–ü–†–û–°–´ –ó–ê–ì–†–£–ñ–ï–ù–´: {questions.length > 0 ? "–î–ê" : "–ù–ï–¢"}
                  </span>
                </div>
              </div>
            </div>
          </div>

          {/* –î–µ–π—Å—Ç–≤–∏—è */}
          <div className="flex gap-4">
            <button
              onClick={() => router.push("/applicant/tests")}
              className="flex-1 flex items-center justify-center gap-2 px-6 py-4 text-slate-300 bg-slate-700 border-2 border-slate-600 font-mono font-bold uppercase"
            >
              <ArrowLeft className="h-4 w-4" />
              –ù–ê–ó–ê–î –ö –¢–ï–°–¢–ê–ú
            </button>

            {profile?.isProfileComplete && questions.length > 0 ? (
              <button
                onClick={handleStartTest}
                disabled={createSessionMutation.isPending}
                className="flex-1 flex items-center justify-center gap-2 px-6 py-4 bg-green-800 text-green-200 border-2 border-green-600 disabled:opacity-50 font-mono font-bold uppercase"
              >
                <Play className="h-4 w-4" />
                {createSessionMutation.isPending ? "–ü–û–î–ì–û–¢–û–í–ö–ê..." : "–ù–ê–ß–ê–¢–¨ –¢–ï–°–¢"}
              </button>
            ) : (
              <button
                disabled
                className="flex-1 flex items-center justify-center gap-2 px-6 py-4 text-slate-400 bg-slate-700 border-2 border-slate-600 opacity-50 font-mono font-bold uppercase"
              >
                <AlertTriangle className="h-4 w-4" />
                –ù–ï–î–û–°–¢–£–ü–ù–û
              </button>
            )}
          </div>
        </div>
      </div>
    );
  }

  // –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
  return (
    <div className="min-h-screen bg-slate-900 text-white">
      {/* –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å —Ç–∞–π–º–µ—Ä–æ–º –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º */}
      <div className="bg-slate-800 border-b-2 border-slate-600 p-4 sticky top-0 z-10">
        <div className="max-w-7xl mx-auto flex items-center justify-between">
          <div className="flex items-center gap-4">
            <h1 className="text-lg font-mono font-bold text-white uppercase">
              {test.title}
            </h1>
            <div className="flex items-center gap-2 text-sm font-mono text-slate-300">
              <Hash className="h-4 w-4" />
              <span>
                {currentQuestionIndex + 1} –ò–ó {questions.length}
              </span>
            </div>
          </div>

          <div className="flex items-center gap-6">
            {/* –ü—Ä–æ–≥—Ä–µ—Å—Å */}
            <div className="flex items-center gap-2">
              <span className="text-sm font-mono font-bold text-slate-300 uppercase">
                –ü–†–û–ì–†–ï–°–°:
              </span>
              <div className="w-32 h-2 bg-slate-700 border border-slate-600">
                <div 
                  className="h-full bg-green-500 transition-all duration-300"
                  style={{ width: `${progress}%` }}
                ></div>
              </div>
              <span className="text-sm font-mono font-bold text-white">
                {Math.round(progress)}%
              </span>
            </div>

            {/* –¢–∞–π–º–µ—Ä */}
            {timeRemaining && (
              <div className="flex items-center gap-2">
                <Timer className={`h-5 w-5 ${timeRemaining.total < 300 ? 'text-red-400' : 'text-yellow-400'}`} />
                <div className={`font-mono font-bold text-lg ${timeRemaining.total < 300 ? 'text-red-400' : 'text-white'}`}>
                  {timeRemaining.hours > 0 && `${timeRemaining.hours}:`}
                  {String(timeRemaining.minutes).padStart(2, '0')}:
                  {String(timeRemaining.seconds).padStart(2, '0')}
                </div>
              </div>
            )}

            {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è */}
            <button
              onClick={() => setShowConfirmFinish(true)}
              className="flex items-center gap-2 px-4 py-2 bg-red-800 text-red-200 border-2 border-red-600 font-mono font-bold uppercase"
            >
              <Send className="h-4 w-4" />
              –ó–ê–í–ï–†–®–ò–¢–¨
            </button>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto p-6">
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
          {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º */}
          <div className="lg:col-span-1">
            <div className="bg-slate-800 border-2 border-slate-600 p-4 sticky top-24">
              <h3 className="text-sm font-mono font-bold text-white mb-4 uppercase border-b border-slate-600 pb-2">
                –ù–ê–í–ò–ì–ê–¶–ò–Ø –ü–û –í–û–ü–†–û–°–ê–ú
              </h3>
              <div className="grid grid-cols-5 lg:grid-cols-4 gap-2">
                {questions.map((question, index) => (
                  <button
                    key={question.$id}
                    onClick={() => goToQuestion(index)}
                    className={`
                      w-10 h-10 font-mono font-bold text-sm border-2 transition-colors
                      ${index === currentQuestionIndex 
                        ? 'bg-blue-800 text-blue-200 border-blue-600' 
                        : answers[question.$id]
                        ? 'bg-green-800 text-green-200 border-green-600'
                        : 'bg-slate-700 text-slate-300 border-slate-600'
                      }
                    `}
                  >
                    {index + 1}
                  </button>
                ))}
              </div>

              <div className="mt-4 space-y-2 text-xs font-mono">
                <div className="flex items-center gap-2">
                  <div className="w-4 h-4 bg-green-800 border border-green-600"></div>
                  <span className="text-slate-300">–û–¢–í–ï–ß–ï–ù–û</span>
                </div>
                <div className="flex items-center gap-2">
                  <div className="w-4 h-4 bg-blue-800 border border-blue-600"></div>
                  <span className="text-slate-300">–¢–ï–ö–£–©–ò–ô</span>
                </div>
                <div className="flex items-center gap-2">
                  <div className="w-4 h-4 bg-slate-700 border border-slate-600"></div>
                  <span className="text-slate-300">–ù–ï –û–¢–í–ï–ß–ï–ù–û</span>
                </div>
              </div>

              <div className="mt-4 pt-4 border-t border-slate-600">
                <div className="text-xs font-mono text-slate-300 space-y-1">
                  <div>–û–¢–í–ï–ß–ï–ù–û: {answeredCount}</div>
                  <div>–û–°–¢–ê–õ–û–°–¨: {questions.length - answeredCount}</div>
                  <div>–í–°–ï–ì–û: {questions.length}</div>
                </div>
              </div>
            </div>
          </div>

          {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç - –≤–æ–ø—Ä–æ—Å */}
          <div className="lg:col-span-3">
            {currentQuestion && (
              <div className="bg-slate-800 border-2 border-slate-600 p-6">
                {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–æ–ø—Ä–æ—Å–∞ */}
                <div className="mb-6">
                  <div className="flex items-center justify-between mb-4">
                    <h2 className="text-lg font-mono font-bold text-white uppercase">
                      –í–û–ü–†–û–° {currentQuestionIndex + 1}
                    </h2>
                    <div className="flex items-center gap-2">
                      {isAnswered && (
                        <span className="px-2 py-1 text-xs font-mono font-bold bg-green-800 text-green-200 border border-green-600 uppercase">
                          –û–¢–í–ï–ß–ï–ù–û
                        </span>
                      )}
                      <div className="flex items-center gap-1 text-sm font-mono text-slate-400">
                        <Award className="h-4 w-4" />
                        <span>{currentQuestion.points} –ë–ê–õ–õ–û–í</span>
                      </div>
                    </div>
                  </div>

                  <div className="text-white font-mono text-lg leading-relaxed mb-6 p-4 bg-slate-700 border border-slate-600">
                    {currentQuestion.questionText}
                  </div>
                </div>

                {/* –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ */}
                <div className="space-y-3 mb-8">
                  {['A', 'B', 'C', 'D'].map((option) => {
                    const optionText = currentQuestion[`option${option}` as keyof typeof currentQuestion] as string;
                    if (!optionText) return null;

                    const isSelected = answers[currentQuestion.$id] === option;

                    return (
                      <button
                        key={option}
                        onClick={() => handleAnswerSelect(currentQuestion.$id, option)}
                        disabled={isSubmittingAnswer}
                        className={`
                          w-full p-4 text-left font-mono border-2 transition-all duration-200 
                          ${isSelected 
                            ? 'bg-blue-800 text-blue-200 border-blue-600' 
                            : 'bg-slate-700 text-slate-300 border-slate-600 hover:bg-slate-600'
                          }
                          ${isSubmittingAnswer ? 'opacity-50 cursor-not-allowed' : ''}
                        `}
                      >
                        <div className="flex items-start gap-3">
                          <div className={`
                            w-8 h-8 flex items-center justify-center font-bold text-sm border-2 flex-shrink-0
                            ${isSelected 
                              ? 'bg-blue-600 text-blue-200 border-blue-400' 
                              : 'bg-slate-600 text-slate-300 border-slate-500'
                            }
                          `}>
                            {option}
                          </div>
                          <div className="flex-1 text-white leading-relaxed">
                            {optionText}
                          </div>
                          {isSelected && (
                            <CheckCircle className="h-5 w-5 text-blue-400 flex-shrink-0 mt-1" />
                          )}
                        </div>
                      </button>
                    );
                  })}
                </div>

                {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º */}
                <div className="flex items-center justify-between">
                  <button
                    onClick={() => goToQuestion(currentQuestionIndex - 1)}
                    disabled={currentQuestionIndex === 0}
                    className="flex items-center gap-2 px-4 py-2 text-slate-300 bg-slate-700 border-2 border-slate-600 disabled:opacity-50 disabled:cursor-not-allowed font-mono font-bold uppercase"
                  >
                    <ChevronLeft className="h-4 w-4" />
                    –ü–†–ï–î–´–î–£–©–ò–ô
                  </button>

                  <div className="flex items-center gap-4 text-sm font-mono text-slate-400">
                    {isSubmittingAnswer && (
                      <div className="flex items-center gap-2">
                        <Loader className="h-4 w-4 animate-spin" />
                        <span>–°–û–•–†–ê–ù–ï–ù–ò–ï...</span>
                      </div>
                    )}
                    <span>
                      –í–û–ü–†–û–° {currentQuestionIndex + 1} –ò–ó {questions.length}
                    </span>
                  </div>

                  <button
                    onClick={() => goToQuestion(currentQuestionIndex + 1)}
                    disabled={currentQuestionIndex === questions.length - 1}
                    className="flex items-center gap-2 px-4 py-2 text-slate-300 bg-slate-700 border-2 border-slate-600 disabled:opacity-50 disabled:cursor-not-allowed font-mono font-bold uppercase"
                  >
                    –°–õ–ï–î–£–Æ–©–ò–ô
                    <ChevronRight className="h-4 w-4" />
                  </button>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è */}
      {showConfirmFinish && (
        <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 p-4">
          <div className="bg-slate-800 border-2 border-slate-600 p-6 max-w-md w-full">
            <div className="text-center">
              <AlertCircle className="h-12 w-12 text-yellow-400 mx-auto mb-4" />
              <h3 className="text-lg font-mono font-bold text-white mb-4 uppercase">
                –ó–ê–í–ï–†–®–ò–¢–¨ –¢–ï–°–¢?
              </h3>
              <p className="text-slate-300 font-mono mb-2">
                –í–´ –£–í–ï–†–ï–ù–´, –ß–¢–û –•–û–¢–ò–¢–ï –ó–ê–í–ï–†–®–ò–¢–¨ –¢–ï–°–¢?
              </p>
              <p className="text-slate-400 font-mono text-sm mb-6">
                –û–¢–í–ï–ß–ï–ù–û: {answeredCount} –ò–ó {questions.length} –í–û–ü–†–û–°–û–í
              </p>

              <div className="flex gap-4">
                <button
                  onClick={() => setShowConfirmFinish(false)}
                  className="flex-1 px-4 py-2 text-slate-300 bg-slate-700 border-2 border-slate-600 font-mono font-bold uppercase"
                >
                  –û–¢–ú–ï–ù–ê
                </button>
                <button
                  onClick={handleFinishTest}
                  disabled={finishSessionMutation.isPending}
                  className="flex-1 px-4 py-2 bg-red-800 text-red-200 border-2 border-red-600 disabled:opacity-50 font-mono font-bold uppercase"
                >
                  {finishSessionMutation.isPending ? "–ó–ê–í–ï–†–®–ï–ù–ò–ï..." : "–ó–ê–í–ï–†–®–ò–¢–¨"}
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ */}
      {timeRemaining && timeRemaining.total < 300 && (
        <div className="fixed top-4 right-4 bg-red-900 border-2 border-red-600 p-4 z-40">
          <div className="flex items-center gap-3">
            <AlertTriangle className="h-5 w-5 text-red-400" />
            <div>
              <div className="font-mono font-bold text-red-200 uppercase">
                –í–ù–ò–ú–ê–ù–ò–ï!
              </div>
              <div className="text-sm font-mono text-red-300">
                –í–†–ï–ú–Ø –ó–ê–ö–ê–ù–ß–ò–í–ê–ï–¢–°–Ø!
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}